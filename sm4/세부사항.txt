0.build_with_grid 시뮬레이터- 현실세계의 grid를 추가한 모델입니다. 슬라이더 파라미터를 조정할 때 유용하게 사용될 것 같아 추가했습니다. 
			사용시 main.py 임포트 경로를 조정하시면 되십니다.
			혹시 궁금한 점 생기면 언제든 연락주세요

1. roi잡기
	시뮬레이터를 꼭 파이썬으로 트는 것이 아니라 build폴더 안의 sm4.exe파일 실행만 하셔도 시뮬레이터는 실행됩니다.
	시뮬레이터에서 보시면 로봇이 왔다갔다 할텐데 이거 참고하셔서 roi영역에 대한 감 잡으시면 되세요

2. 6*5으로 roi를 잡은 영역 나누기
	저번에 알려드린 넘파이 슬라이드 쓰시면 되세요

3. 슬라이드 파라미터 조정
	그냥 똑같은 크기로 6*5로 나누었을 때 가운데에서 멀리 있는 화물이나 짐일 수록 가운데에서 어긋나 있는 모습을 확인할 수 있어요
	카메라는 중앙에 있고, 화물과 로봇에는 높이가 있기 때문에 생기는 현상인데
	이를 자르는 정도를 조절하시면서 보정하시면 되세요. 
	30개의 영역이 있기 때문에 30줄 정도 쓰셔서 일일이 자르면서 리스트에 넣으셔도 되고
	어떤 규칙이 있다면 그 규칙에 따라 넣으셔도 됩니다.
	잘 자르고 있는지 확인하고 싶다면 made_data의 사진들을 비교하면서 자르시면 되실꺼예요

4. 잡은 roi영역과 똑같은 크기의 빈 행렬을 만들어 주세요

5. 빈 행렬을 30칸으로 나누어 주세요

6. 자른 영역들이 리스트에 저장되어 있다 가정할 때, for문으로 각 영역에 무슨 객체가 있는지 확인하시고 영상 같이 나오도록 칠해주시면 됩니다.
	단 파란색 화물도 로봇과 같은 규칙으로 칠해지도록 해주세요

7. 칠해줄 때 참고할만한 사항은 영역의 비율로 값을 반환하는 함수를 짜면 가능하다는 것입니다.
	즉 만약 파라미터를 조정한 상태에서 슬라이딩을 했을 때, 초록색 영역이 반만큼 칠해져 있다면 빈 행렬도 반만큼 칠해주면 된다는 거입니다.
	이는 슬라이딩된 영역의 가로세로 길이와 칠해진 영역의 가로세로 크기를 나누어주면 구할 수 있습니다. 


8. 빨간 색 화물은 이와는 반대로 슬라이딩을 했을 때, 조금이라도 빨간색이 보인다면 빈 행렬칸을 모두 칠해주면 되지요

9.np.where() 함수를 공부하시면 행렬에서 조건에 맞는 모든값의 인덱스를 가져올 수 있습니다.
	이때 인덱스의 최댓갑과 최솟값을 얻어서 빼주면 너비와 높이를 알 수 있습니다. 

다음과 같은 구조로 짜주세요
반복문:
	이미지 받는 구간
	roi잡기
	list1 = 슬라이드 파라미터에 따라 나눈 roi영역넣기
	
	빈행렬 생성
	i=0
	for문으로 빈행렬을 30칸으로 나눈다:
		class, WH, point = 행렬칸안에 있는 요소는 무엇인지, 그 요소의 너비와 높이는 어떻게 되는지, 시작지점은 어딘지 리턴하는 함수(list1[i])
		
		if class == 'obs':
			행렬칸을 모두 빨간색으로 칠한다.
		if class == 'target':
			행렬칸을 비율만큼 칠한다.
		if class == 'robot':
			행렬칸을 비율 만큼 칠한다.

	imshow()로 만든 빈 행렬 이미지 확인

		




	